# Makefile.in generated by automake 1.9.6 from Makefile.am.
# moses/src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/moses
pkglibdir = $(libdir)/moses
pkgincludedir = $(includedir)/moses
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
#am__append_1 = rule.pb.cc hypergraph.pb.cc
am__append_2 = LanguageModelSRI.cpp
#am__append_3 = LanguageModelIRST.cpp
#am__append_4 = LanguageModelInternal.cpp \
#		      NGramCollection.cpp \
#		      NGramNode.cpp

subdir = moses/src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)"
libLIBRARIES_INSTALL = $(INSTALL_DATA)
LIBRARIES = $(lib_LIBRARIES)
AR = ar
ARFLAGS = cru
libmoses_a_AR = $(AR) $(ARFLAGS)
libmoses_a_LIBADD =
am__libmoses_a_SOURCES_DIST = AlignmentElement.cpp AlignmentPhrase.cpp \
	AlignmentPair.cpp BitmapContainer.cpp ConfusionNet.cpp \
	DecodeGraph.cpp DecodeStep.cpp DecodeStepGeneration.cpp \
	DecodeStepTranslation.cpp Dictionary.cpp \
	DummyScoreProducers.cpp Factor.cpp FactorCollection.cpp \
	FactorTypeSet.cpp FloydWarshall.cpp GenerationDictionary.cpp \
	hash.cpp Hypothesis.cpp HypothesisStack.cpp \
	HypothesisStackCubePruning.cpp HypothesisStackNormal.cpp \
	InputType.cpp InputFileStream.cpp LMList.cpp LVoc.cpp \
	LanguageModel.cpp LanguageModelFactory.cpp \
	LanguageModelMultiFactor.cpp LanguageModelSingleFactor.cpp \
	LanguageModelSkip.cpp TrellisPath.cpp \
	TrellisPathCollection.cpp LexicalReordering.cpp \
	LexicalReorderingTable.cpp Manager.cpp mempool.cpp \
	PCNTools.cpp Parameter.cpp PartialTranslOptColl.cpp Phrase.cpp \
	PhraseDictionary.cpp PhraseDictionaryMemory.cpp \
	PhraseDictionaryNode.cpp PhraseDictionaryTree.cpp \
	PhraseDictionaryTreeAdaptor.cpp PrefixTreeMap.cpp \
	ScoreComponentCollection.cpp ScoreIndexManager.cpp \
	ScoreProducer.cpp Search.cpp SearchCubePruning.cpp \
	SearchNormal.cpp Sentence.cpp SentenceStats.cpp StaticData.cpp \
	TargetPhrase.cpp TargetPhraseCollection.cpp Timer.cpp \
	TranslationOption.cpp TranslationOptionCollection.cpp \
	TranslationOptionCollectionText.cpp \
	TranslationOptionCollectionConfusionNet.cpp UserMessage.cpp \
	Util.cpp Word.cpp WordsBitmap.cpp WordLattice.cpp \
	WordsRange.cpp XmlOption.cpp rule.pb.cc hypergraph.pb.cc \
	LanguageModelSRI.cpp LanguageModelIRST.cpp \
	LanguageModelInternal.cpp NGramCollection.cpp NGramNode.cpp
#am__objects_1 = rule.pb.$(OBJEXT) \
#	hypergraph.pb.$(OBJEXT)
am__objects_2 = LanguageModelSRI.$(OBJEXT)
#am__objects_3 = LanguageModelIRST.$(OBJEXT)
#am__objects_4 = LanguageModelInternal.$(OBJEXT) \
#	NGramCollection.$(OBJEXT) \
#	NGramNode.$(OBJEXT)
am_libmoses_a_OBJECTS = AlignmentElement.$(OBJEXT) \
	AlignmentPhrase.$(OBJEXT) AlignmentPair.$(OBJEXT) \
	BitmapContainer.$(OBJEXT) ConfusionNet.$(OBJEXT) \
	DecodeGraph.$(OBJEXT) DecodeStep.$(OBJEXT) \
	DecodeStepGeneration.$(OBJEXT) DecodeStepTranslation.$(OBJEXT) \
	Dictionary.$(OBJEXT) DummyScoreProducers.$(OBJEXT) \
	Factor.$(OBJEXT) FactorCollection.$(OBJEXT) \
	FactorTypeSet.$(OBJEXT) FloydWarshall.$(OBJEXT) \
	GenerationDictionary.$(OBJEXT) hash.$(OBJEXT) \
	Hypothesis.$(OBJEXT) HypothesisStack.$(OBJEXT) \
	HypothesisStackCubePruning.$(OBJEXT) \
	HypothesisStackNormal.$(OBJEXT) InputType.$(OBJEXT) \
	InputFileStream.$(OBJEXT) LMList.$(OBJEXT) LVoc.$(OBJEXT) \
	LanguageModel.$(OBJEXT) LanguageModelFactory.$(OBJEXT) \
	LanguageModelMultiFactor.$(OBJEXT) \
	LanguageModelSingleFactor.$(OBJEXT) \
	LanguageModelSkip.$(OBJEXT) TrellisPath.$(OBJEXT) \
	TrellisPathCollection.$(OBJEXT) LexicalReordering.$(OBJEXT) \
	LexicalReorderingTable.$(OBJEXT) Manager.$(OBJEXT) \
	mempool.$(OBJEXT) PCNTools.$(OBJEXT) Parameter.$(OBJEXT) \
	PartialTranslOptColl.$(OBJEXT) Phrase.$(OBJEXT) \
	PhraseDictionary.$(OBJEXT) PhraseDictionaryMemory.$(OBJEXT) \
	PhraseDictionaryNode.$(OBJEXT) PhraseDictionaryTree.$(OBJEXT) \
	PhraseDictionaryTreeAdaptor.$(OBJEXT) PrefixTreeMap.$(OBJEXT) \
	ScoreComponentCollection.$(OBJEXT) ScoreIndexManager.$(OBJEXT) \
	ScoreProducer.$(OBJEXT) Search.$(OBJEXT) \
	SearchCubePruning.$(OBJEXT) SearchNormal.$(OBJEXT) \
	Sentence.$(OBJEXT) SentenceStats.$(OBJEXT) \
	StaticData.$(OBJEXT) TargetPhrase.$(OBJEXT) \
	TargetPhraseCollection.$(OBJEXT) Timer.$(OBJEXT) \
	TranslationOption.$(OBJEXT) \
	TranslationOptionCollection.$(OBJEXT) \
	TranslationOptionCollectionText.$(OBJEXT) \
	TranslationOptionCollectionConfusionNet.$(OBJEXT) \
	UserMessage.$(OBJEXT) Util.$(OBJEXT) Word.$(OBJEXT) \
	WordsBitmap.$(OBJEXT) WordLattice.$(OBJEXT) \
	WordsRange.$(OBJEXT) XmlOption.$(OBJEXT) $(am__objects_1) \
	$(am__objects_2) $(am__objects_3) $(am__objects_4)
libmoses_a_OBJECTS = $(am_libmoses_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(libmoses_a_SOURCES)
DIST_SOURCES = $(am__libmoses_a_SOURCES_DIST)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /group/project/statmt2/ehasler2/moses/branches/eva_maxent/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /group/project/statmt2/ehasler2/moses/branches/eva_maxent/missing --run tar
AUTOCONF = ${SHELL} /group/project/statmt2/ehasler2/moses/branches/eva_maxent/missing --run autoconf
AUTOHEADER = ${SHELL} /group/project/statmt2/ehasler2/moses/branches/eva_maxent/missing --run autoheader
AUTOMAKE = ${SHELL} /group/project/statmt2/ehasler2/moses/branches/eva_maxent/missing --run automake-1.9
AWK = gawk
CPPFLAGS =  -I/group/project/statmt2/ehasler/Programs/srilm//include
CXX = g++
CXXCPP = 
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = 
EXEEXT = 
GREP = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INTERNAL_LM_FALSE = 
INTERNAL_LM_TRUE = #
IRST_LM_FALSE = 
IRST_LM_TRUE = #
LDFLAGS =  -L/group/project/statmt2/ehasler/Programs/srilm//lib/i686
LIBOBJS = 
LIBS =  -loolm -ldstruct -lmisc -lz
LTLIBOBJS = 
MAKEINFO = ${SHELL} /group/project/statmt2/ehasler2/moses/branches/eva_maxent/missing --run makeinfo
OBJEXT = o
PACKAGE = moses
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PROTOBUF_FALSE = 
PROTOBUF_TRUE = #
PROTOC = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
SRI_LM_FALSE = #
SRI_LM_TRUE = 
STRIP = 
VERSION = 0.1
ac_ct_CXX = g++
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /group/project/statmt2/ehasler2/moses/branches/eva_maxent/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
lib_LIBRARIES = libmoses.a
AM_CPPFLAGS = -W -Wall -ffor-scope -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES 
libmoses_a_SOURCES = AlignmentElement.cpp AlignmentPhrase.cpp \
	AlignmentPair.cpp BitmapContainer.cpp ConfusionNet.cpp \
	DecodeGraph.cpp DecodeStep.cpp DecodeStepGeneration.cpp \
	DecodeStepTranslation.cpp Dictionary.cpp \
	DummyScoreProducers.cpp Factor.cpp FactorCollection.cpp \
	FactorTypeSet.cpp FloydWarshall.cpp GenerationDictionary.cpp \
	hash.cpp Hypothesis.cpp HypothesisStack.cpp \
	HypothesisStackCubePruning.cpp HypothesisStackNormal.cpp \
	InputType.cpp InputFileStream.cpp LMList.cpp LVoc.cpp \
	LanguageModel.cpp LanguageModelFactory.cpp \
	LanguageModelMultiFactor.cpp LanguageModelSingleFactor.cpp \
	LanguageModelSkip.cpp TrellisPath.cpp \
	TrellisPathCollection.cpp LexicalReordering.cpp \
	LexicalReorderingTable.cpp Manager.cpp mempool.cpp \
	PCNTools.cpp Parameter.cpp PartialTranslOptColl.cpp Phrase.cpp \
	PhraseDictionary.cpp PhraseDictionaryMemory.cpp \
	PhraseDictionaryNode.cpp PhraseDictionaryTree.cpp \
	PhraseDictionaryTreeAdaptor.cpp PrefixTreeMap.cpp \
	ScoreComponentCollection.cpp ScoreIndexManager.cpp \
	ScoreProducer.cpp Search.cpp SearchCubePruning.cpp \
	SearchNormal.cpp Sentence.cpp SentenceStats.cpp StaticData.cpp \
	TargetPhrase.cpp TargetPhraseCollection.cpp Timer.cpp \
	TranslationOption.cpp TranslationOptionCollection.cpp \
	TranslationOptionCollectionText.cpp \
	TranslationOptionCollectionConfusionNet.cpp UserMessage.cpp \
	Util.cpp Word.cpp WordsBitmap.cpp WordLattice.cpp \
	WordsRange.cpp XmlOption.cpp $(am__append_1) $(am__append_2) \
	$(am__append_3) $(am__append_4)
#BUILT_SOURCES = \
#  rule.pb.h \
#  rule.pb.cc \
#  hypergraph.pb.h \
#  hypergraph.pb.cc

#CLEANFILES = $(BUILT_SOURCES)
#SUFFIXES = .proto
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .proto .cc .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  moses/src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  moses/src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(mkdir_p) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(libLIBRARIES_INSTALL) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(libLIBRARIES_INSTALL) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    p=$(am__strip_dir) \
	    echo " $(RANLIB) '$(DESTDIR)$(libdir)/$$p'"; \
	    $(RANLIB) "$(DESTDIR)$(libdir)/$$p"; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
libmoses.a: $(libmoses_a_OBJECTS) $(libmoses_a_DEPENDENCIES) 
	-rm -f libmoses.a
	$(libmoses_a_AR) libmoses.a $(libmoses_a_OBJECTS) $(libmoses_a_LIBADD)
	$(RANLIB) libmoses.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/AlignmentElement.Po
include ./$(DEPDIR)/AlignmentPair.Po
include ./$(DEPDIR)/AlignmentPhrase.Po
include ./$(DEPDIR)/BitmapContainer.Po
include ./$(DEPDIR)/ConfusionNet.Po
include ./$(DEPDIR)/DecodeGraph.Po
include ./$(DEPDIR)/DecodeStep.Po
include ./$(DEPDIR)/DecodeStepGeneration.Po
include ./$(DEPDIR)/DecodeStepTranslation.Po
include ./$(DEPDIR)/Dictionary.Po
include ./$(DEPDIR)/DummyScoreProducers.Po
include ./$(DEPDIR)/Factor.Po
include ./$(DEPDIR)/FactorCollection.Po
include ./$(DEPDIR)/FactorTypeSet.Po
include ./$(DEPDIR)/FloydWarshall.Po
include ./$(DEPDIR)/GenerationDictionary.Po
include ./$(DEPDIR)/Hypothesis.Po
include ./$(DEPDIR)/HypothesisStack.Po
include ./$(DEPDIR)/HypothesisStackCubePruning.Po
include ./$(DEPDIR)/HypothesisStackNormal.Po
include ./$(DEPDIR)/InputFileStream.Po
include ./$(DEPDIR)/InputType.Po
include ./$(DEPDIR)/LMList.Po
include ./$(DEPDIR)/LVoc.Po
include ./$(DEPDIR)/LanguageModel.Po
include ./$(DEPDIR)/LanguageModelFactory.Po
include ./$(DEPDIR)/LanguageModelIRST.Po
include ./$(DEPDIR)/LanguageModelInternal.Po
include ./$(DEPDIR)/LanguageModelMultiFactor.Po
include ./$(DEPDIR)/LanguageModelSRI.Po
include ./$(DEPDIR)/LanguageModelSingleFactor.Po
include ./$(DEPDIR)/LanguageModelSkip.Po
include ./$(DEPDIR)/LexicalReordering.Po
include ./$(DEPDIR)/LexicalReorderingTable.Po
include ./$(DEPDIR)/Manager.Po
include ./$(DEPDIR)/NGramCollection.Po
include ./$(DEPDIR)/NGramNode.Po
include ./$(DEPDIR)/PCNTools.Po
include ./$(DEPDIR)/Parameter.Po
include ./$(DEPDIR)/PartialTranslOptColl.Po
include ./$(DEPDIR)/Phrase.Po
include ./$(DEPDIR)/PhraseDictionary.Po
include ./$(DEPDIR)/PhraseDictionaryMemory.Po
include ./$(DEPDIR)/PhraseDictionaryNode.Po
include ./$(DEPDIR)/PhraseDictionaryTree.Po
include ./$(DEPDIR)/PhraseDictionaryTreeAdaptor.Po
include ./$(DEPDIR)/PrefixTreeMap.Po
include ./$(DEPDIR)/ScoreComponentCollection.Po
include ./$(DEPDIR)/ScoreIndexManager.Po
include ./$(DEPDIR)/ScoreProducer.Po
include ./$(DEPDIR)/Search.Po
include ./$(DEPDIR)/SearchCubePruning.Po
include ./$(DEPDIR)/SearchNormal.Po
include ./$(DEPDIR)/Sentence.Po
include ./$(DEPDIR)/SentenceStats.Po
include ./$(DEPDIR)/StaticData.Po
include ./$(DEPDIR)/TargetPhrase.Po
include ./$(DEPDIR)/TargetPhraseCollection.Po
include ./$(DEPDIR)/Timer.Po
include ./$(DEPDIR)/TranslationOption.Po
include ./$(DEPDIR)/TranslationOptionCollection.Po
include ./$(DEPDIR)/TranslationOptionCollectionConfusionNet.Po
include ./$(DEPDIR)/TranslationOptionCollectionText.Po
include ./$(DEPDIR)/TrellisPath.Po
include ./$(DEPDIR)/TrellisPathCollection.Po
include ./$(DEPDIR)/UserMessage.Po
include ./$(DEPDIR)/Util.Po
include ./$(DEPDIR)/Word.Po
include ./$(DEPDIR)/WordLattice.Po
include ./$(DEPDIR)/WordsBitmap.Po
include ./$(DEPDIR)/WordsRange.Po
include ./$(DEPDIR)/XmlOption.Po
include ./$(DEPDIR)/hash.Po
include ./$(DEPDIR)/hypergraph.pb.Po
include ./$(DEPDIR)/mempool.Po
include ./$(DEPDIR)/rule.pb.Po

.cc.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LIBRARIES)
installdirs:
	for dir in "$(DESTDIR)$(libdir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-libLIBRARIES

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am uninstall-libLIBRARIES

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-libLIBRARIES install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am uninstall-libLIBRARIES


#rule.pb.cc: rule.proto
#	 --cpp_out=. $<
#rule.pb.h: rule.proto
#	 --cpp_out=. $<

#hypergraph.pb.cc: hypergraph.proto
#	 --cpp_out=. $<			
#hypergraph.pb.h: hypergraph.proto
#	 --cpp_out=. $<			
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
